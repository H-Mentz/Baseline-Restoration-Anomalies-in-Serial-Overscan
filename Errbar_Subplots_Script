from lsst.daf.persistence import Butler
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rcParams
import warnings
warnings.filterwarnings('ignore')

def get_longest_exposure_info(butler, run, raft, sensor):
    exp_times = butler.queryMetadata('raw', ['expTime', 'expId'], dataId={'run': run,'raftName': raft,'detectorName': sensor})
    return np.sort(exp_times,axis=0)[-1]

#def median_pixel_values(exp):
    #det = exp.getDetector()
    #for amp in det:
        #imArray = exp[amp.getRawDataBBox()].getMaskedImage().getImage().getArray()
        #print(f"The median pixel value for image array is ", np.median(imArray))
        #print()

def plot_overscans(exp, title_prefix, title_plots):
    fig, axs = plt.subplots(4,4,figsize=(50,50))

    det = exp.getDetector()
    for amp, ax in zip(det, axs.ravel()):

        imarray = exp[amp.getRawDataBBox()].getMaskedImage().getImage().getArray()
        mpv_array = np.median(imarray)
        #print(np.median(exp[amp.getRawDataBBox()].getMaskedImage().getImage().getArray()))
        #print(f"The median pixel value for image array is ",  median_pixel_value_full_array)
        overscan_arr = exp[amp.getRawHorizontalOverscanBBox()].getMaskedImage().getImage().getArray()
        overscan_means = np.mean(overscan_arr, axis=0)
        overscan_std = np.std(overscan_arr, axis=0)
        #med_pix_val_oscan = np.median(overscan_arr)
        #print()
        #print(f"The median pixel value for image oscan is ", med_pix_val_oscan)
        #print(f"The median pixel value for image array is ",  median_pixel_value_full_array)
        #print()

        ax.errorbar(np.arange(len(overscan_means)), overscan_means, yerr=overscan_std, ecolor='red', capsize=2, errorevery=1)
        ax.set_title(f'{title_prefix} - {amp.getName()}', loc='center', pad=20, wrap=True, fontsize=20)
        #print("The shape of image array is ", imArray.shape)
        ax.set_xlabel('Pixel Value', fontsize=20)
        ax.set_ylabel('ADU Counts', fontsize=20)
        #ax.set_yscale("linear")
        ax.ticklabel_format(useOffset=False)
        rcParams['axes.titlepad'] = 20
        fig.tight_layout(h_pad=3, w_pad=15)
        fig.subplots_adjust(top=0.85)
        ax.annotate(text='MPV Array' + str(mpv_array), xy=(4, 6), xycoords='data')
    plt.savefig(title_plots, facecolor='w', bbox_inches = 'tight', pad_inches = 1)
    fig.show()
    return fig, axs

def plot_longest_exp_overscans(butler, run, raft, sensor):
    exp_time, expId = get_longest_exposure_info(butler, run, raft, sensor)
    longest_exp = butler.get('raw', dataId={'expId': expId,'run': run,'raftName': raft,'detectorName': sensor})

    det = longest_exp.getDetector()

    title_plots = f'plots/errbar_{run}_{expId}_{det.getSerial()}_{raft}_{sensor}.png'
    fig, axs = plot_overscans(longest_exp, f'Overscans in Run {run} - {expId} - {det.getSerial()} - {raft} - {sensor}', title_plots)                                                    
                       
