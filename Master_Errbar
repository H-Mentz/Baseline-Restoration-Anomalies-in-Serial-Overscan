from lsst.daf.persistence import Butler
import numpy as np
import lsst.afw.display as afwDisplay 
import matplotlib.pyplot as plt 
import lsst.ip.isr as isr
import statistics as stat
import pandas as pd
afwDisplay.setDefaultBackend('matplotlib')
%matplotlib inline

def bias_isr(raw, overscan_correct=True):
    raw_clone = raw.clone()
    task = isr.isrTask.IsrTask()
    task.config.doAssembleCcd = True
    task.assembleCcd.config.doTrim = True
    task.config.overscanFitType = 'MEDIAN_PER_ROW'
    task.config.doOverscan = overscan_correct
    task.config.doBias = False
    task.config.doLinearize = False
    task.config.doDark = False
    task.config.doFlat = False
    task.config.doDefect = False
    assembled = task.run(raw_clone).exposure
    return assembled.getImage()
# Want a function that: when run, raft, sensor, & amp called- gives data for multiple subplots

def errbar_subplot_magic(run, raftName, detectorName):
#     Make the arguments callable by me; but amp is different.
    imageType = 'FLAT'
    repo = '/lsstdata/offline/teststand/BOT/gen2repo/'
    butler = Butler(repo)
    dataId = dict(detectorName=detectorName, run=run, imageType=imageType, raftName=raftName)
    expIds = butler.queryMetadata('raw', 'visit', dataId=dataId)
    expId = expIds[0] 
    dataId['visit'] = expId
    exp = butler.get('raw', dataId)
    ccd = exp.getDetector()
#     help(ccd)
    serial = ccd.getSerial()
    vendor = serial[:3]
    if vendor == 'ITL':
        oscan_begin = 509
    if vendor == 'E2V':
        oscan_begin = 512

    for amp in ccd:
        ampName = amp.getName()
        dataBBox = amp.getRawDataBBox()
        oscanBBox = amp.getRawHorizontalOverscanBBox()  
        overscanImage = exp.maskedImage[oscanBBox]
        overscanArray = overscanImage.image.array
        overscanArraysq = overscanArray ** 2
        ampImage = exp.maskedImage[dataBBox]
    
    #   imArray = ampImage.image.array
        imArray = ampImage.getImage().getArray()
        imArraysq = imArray ** 2

        Array = Array = np.hstack((imArray, overscanArray))

        std = np.std(Array, axis=0) 
#         print(std.shape);
#         print(std[-100:]);
#         print();
        oscan_std = std[oscan_begin:]
    
        mean = np.mean(Array, axis=0)
#         print(mean[-100:]);
#         print();
         
        oscan_mean = mean[oscan_begin:]
        
#       plt.imshow(Array);
        fig = plt.figure(figsize=(30,20))
        plt.errorbar(np.arange(oscan_begin, oscan_begin+len(oscan_mean)), oscan_mean, yerr=oscan_std, ecolor='red', capsize=2, errorevery=1);
#       plt.xlim(500, 580)
#       plt.ylim(24000, 26000)
        plt.xlabel('Pixel Value', fontsize=20)
        plt.ylabel('ADU Counts', fontsize=20)
        plt.title(f" Mean Pixel Number vs ADU Counts for: {run}, {raftName}, {detectorName}, {ampName}, {vendor} ", fontsize=30)
        plt.tight_layout()
        plt.savefig(f'errbar_{run}_{raftName}_{detectorName}_{ampName}_{vendor}.png', facecolor='w')
        plt.show()
        
        errbar_subplot_magic('6790D', 'R01', 'S20')
