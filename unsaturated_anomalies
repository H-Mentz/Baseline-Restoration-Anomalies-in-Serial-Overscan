# SUBPLOTS W/ AMP LOOP

from lsst.daf.persistence import Butler
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rcParams
    
def get_longest_exposure_info(b, run, raft, sensor):
    exp_times = b.queryMetadata('raw', ['expTime','expId'], dataId={'run': run,'raftName': raft,'detectorName': sensor, 'imageType': 'BIAS'})
    # s = sorted(exp_times)[-1] #Longest exposure time in exp_times
    print(len(exp_times))
    # s = sorted(exp_times)[80]
    # s = sorted(exp_times)[67]
    # s = sorted(exp_times)[56]
    s = sorted(exp_times)[len(exp_times)//2] #Median exposure time in exp_times
    # return sorted(exp_times)[0] #Shortest exposure time in exp_times
    return s

# def crude_bias_subtraction(b, run, raft, sensor):
#     bias_exp_times = b.queryMetadata('raw', ['expTime', 'expId'], dataId={'run': run,'raftName': raft, 'detectorName':sensor, 'imageType': 'BIAS'})
#     exp_times = b.queryMetadata('raw', ['expTime', 'expId'], dataId={'run':run, 'raftName':raft, 'detectorName':sensor, 'imageType':'FLAT'})
#     s_bias = sorted(exp_times)[-1]
    
def plot_overscans(longest_exp, title_prefix, title_plots, title_subplots):
    fig, axs = plt.subplots(4,4,figsize=(50,50))
#     fig, axs = plt.subplots(2,8,figsize=(90,20))
    det = longest_exp.getDetector()
    for amp, ax in zip(det, axs.ravel()):
        imarray = longest_exp[amp.getRawBBox()].getMaskedImage().getImage().getArray()
        mpv_array = np.median(imarray)
        formatted_mpv_array = format(mpv_array, ".3f")
                                     
        
        overscan_arr = longest_exp[amp.getRawHorizontalOverscanBBox()].getMaskedImage().getImage().getArray()
        
        #FOR E2V SENSORS      
        # if amp.getName()[1] == '1':
        #     flipscan = np.fliplr(overscan_arr)
        #     re_or_array = np.array(flipscan)
        # else:
        #     rotscan = np.rot90(overscan_arr, k=2)
        #     flipscan = np.fliplr(rotscan)
        #     re_or_array = np.array(flipscan)     
        # # # im = ax.imshow(re_or_array)
        # overscan_means = np.mean(re_or_array, axis=0) 
        # overscan_std = np.std(re_or_array, axis=0)    
# 
          
        #FOR ITL SENSORS
        if amp.getName()[1] == '1':
            flipscan = np.fliplr(overscan_arr)
            re_or_array = np.array(flipscan)
        else:
            rotscan = np.rot90(overscan_arr, k=2)
            re_or_array = np.array(rotscan)     
        # # im = ax.imshow(re_or_array)
        overscan_means = np.mean(re_or_array, axis=0) 
        overscan_std = np.std(re_or_array, axis=0)
        
        
        # rotscan = np.rot90(overscan_arr, k=2) #itl & e2v
        # flipscan = np.fliplr(rotscan) #e2v
        # overscan_means = np.mean(rotscan, axis=0) #itl
        # overscan_std = np.std(rotscan, axis=0) #itl
        # overscan_means = np.mean(flipscan, axis=0) #e2v
        # overscan_std = np.std(flipscan, axis=0) #e2v

        # mean_std = np.mean(overscan_std)
        # length_ebar = 2*mean_std
        # formatted_ebar_length = format(length_ebar, ".3f")
        
        # overscan_means = np.mean(overscan_arr, axis=0) #for natural sensor orientation only
        # overscan_std = np.std(overscan_arr, axis=0)    #for natural sensor orientation only

       
        ax.errorbar(np.arange(len(overscan_means)), overscan_means, yerr=overscan_std, fmt='o', color='blue', capsize=5)
#         ax.set_title(f'{title_prefix} - {amp.getName()}', loc='center', pad=20, wrap=True, fontsize=22)
#         txt = "For only {price:.2f} dollars!"
#         print(txt.format(price = 49))
                                     
        label1 = 'Median Pixel Value Full Image: {formatted_mpv_array}'.format(formatted_mpv_array=formatted_mpv_array)
#         label1 = 'Median Pixel Value Full Image: {mpv_array}'.format(mpv_array=mpv_array)
        ax.set_title(f'{amp.getName()}_{label1}', wrap=True, loc='center', pad=20, fontsize=28)
        ax.set_xlabel('Overscan Pixel Number', fontsize=28)
        ax.set_ylabel('ADU Counts', fontsize=28)
        ax.ticklabel_format(useOffset=False)
        rcParams['axes.titlepad'] = 25
        ax.tick_params(axis='x', labelsize=15)
        ax.tick_params(axis='y', labelsize=15)
        fig.tight_layout(h_pad=3, w_pad=15)
        fig.subplots_adjust(top=0.95)
#         label2 = 'AVG length of Ebar: {length_ebar}'.format(length_ebar=length_ebar)


        length_ebar = np.mean(overscan_std)
        formatted_ebar_length = format(length_ebar, ".1f")
        label2 = 'AVG variance: +- {formatted_ebar_length}'.format(formatted_ebar_length=formatted_ebar_length)
        ax.legend([label2], fontsize=20)
        
        # label2 = 'AVG length of Ebar: {formatted_ebar_length}'.format(formatted_ebar_length=formatted_ebar_length)
        # ax.legend([label2], fontsize=20)
    fig.suptitle(f'{title_prefix}', fontsize=28)
    plt.savefig(title_plots, facecolor='w', bbox_inches = 'tight', pad_inches = 1)
    fig.show()
    return fig, axs
    
    
    
def plot_longest_exp_overscans(b, run, raft, sensor):
    exp_Time, expId = get_longest_exposure_info(b, run, raft, sensor)
#     print(exp_Time)
#     print(expId)
    formatted_exp_Time = format(exp_Time, ".3f")
    longest_exp = b.get('raw', dataId={'expId': expId,'run': run,'raftName': raft,'detectorName': sensor, 'imageType': 'BIAS'})
    # image = b.get("postISRCCD", dataId=dataId)
    # print(image)
    det = longest_exp.getDetector()
    title_subplots = f'{run}_{det.getSerial()}_{raft}_{sensor}'
    title_plots = f'plots/errbar_{run}_{expId}_{det.getSerial()}_{raft}_{sensor}.png'
#     fig, axs = plot_overscans(longest_exp, f'Overscans in Run {run} - {expId} - {det.getSerial()} -{raft} - {sensor} - {exp_Time} s ', title_plots, title_subplots)   
    fig, axs = plot_overscans(longest_exp, f'Overscans in Run {run} - {expId} - {det.getSerial()} -{raft} - {sensor} - {formatted_exp_Time} s ', title_plots, title_subplots)   
    return fig, axs


repo_directory = "/lsstdata/offline/teststand/BOT/gen2repo"
b = Butler(repo_directory)


# run = '12844'
# raft = 'R02'
# sensor = 'S11'

# run = '12549'
# raft = 'R22'
# sensor = 'S11'
# run = '13018'
# run = '13038'
run = '13035'
# run = '12606'
# run = '12179'
# raft = 'R02'
# raft = 'R42'
# raft = 'R01'
# raft = 'R02'
# raft = 'R03'
# raft = 'R10'
# raft = 'R20'
# raft = 'R41'
# raft = 'R42'
# raft = 'R43'
# raft = 'R22'
# raft = 'R03'
# raft = 'R43'
# raft = 'R43'
# raft = 'R12'
# sensor = 'S21'
# sensor = 'S10'
# sensor = 'S01'
# sensor = 'S00'
sensors = ['S00', 'S01', 'S02', 'S10', 'S11', 'S12', 'S20', 'S21', 'S22']

for sensor in sensors: 
    plot_longest_exp_overscans(b, run, raft, sensor)
# plot_longest_exp_overscans(b, run, raft, sensor)
